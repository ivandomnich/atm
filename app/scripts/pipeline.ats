export class Pipeline {
  constructor() {
    this.steps = [
      instruction => instruction.router.makeDescendantRouters(instruction),
      instruction => instruction.router.canDeactivateOutlets(instruction),
      instruction => instruction.router.traverseOutlets((outlet, name) => {
        return boolToPromise(outlet.canActivate(instruction.outlets[name]));
      }),
      instruction => instruction.router.activateOutlets(instruction)
    ];
  }
  process(instruction) {
    // make a copy
    var steps = this.steps.slice(0);

    function processOne(result) {
      if (steps.length === 0) {
        return result;
      }
      var step = steps.shift();
      return Promise.resolve(step(instruction)).then(processOne);
    }

    return processOne();
  }
}

function boolToPromise (value) {
  return value ? Promise.resolve(value) : Promise.reject();
}
